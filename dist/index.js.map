{"version":3,"file":"index.js","mappings":";AAAA;AACA;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack://issues-translator/webpack/runtime/compat","../webpack://issues-translator/./lib/main.js"],"sourcesContent":["\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core = __importStar(require(\"@actions/core\"));\nconst github = __importStar(require(\"@actions/github\"));\nconst ts_md5_1 = require(\"ts-md5\");\nconst marked_1 = __importDefault(require(\"marked\"));\nconst utils_1 = require(\"./utils\");\nconst modes_1 = __importDefault(require(\"./modes\"));\nconst translate_1 = require(\"./utils/translate\");\nconst TRANSLATE_TITLE_DIVING = `||`;\nconst ORIGINAL_MD5_PREFIX = `<!--MD5:`;\nconst ORIGINAL_MD5_POSTFIX = `:MD5-->`;\nconst ORIGIN_CONTENT_PREFIX = `<details><summary>原文</summary>`;\nconst REPLAY_PREFIX1 = `> 原文`;\nconst REPLAY_PREFIX2 = `> <details><summary>原文</summary>`;\nconst ORIGIN_CONTENT_POSTFIX = `</details>`;\nconst UPDATED_FLAG = `</hide>`;\nconst DEFAULT_BOT_MESSAGE = `Github Action Bot detected the issue body's language is not English, translate it automatically`;\nconst DEFAULT_BOT_TOKEN = process.env.GITHUB_TOKEN;\nfunction main() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const isModifyTitle = core.getInput('IS_MODIFY_TITLE');\n        const shouldAppendContent = core.getInput('APPEND_TRANSLATION');\n        const botNote = DEFAULT_BOT_MESSAGE;\n        // ignore when bot comment issue himself\n        const botToken = DEFAULT_BOT_TOKEN;\n        if (!botToken) {\n            return core.info(`GITHUB_TOKEN is requried!`);\n        }\n        const model = (0, modes_1.default)();\n        if (!model) {\n            return;\n        }\n        let { match, title, body, update } = model;\n        if (!match) {\n            return;\n        }\n        if (typeof body == 'undefined' || body == null) {\n            core.info('body 读取为空，直接返回');\n            return;\n        }\n        const octokit = github.getOctokit(botToken);\n        const originTitle = (_a = title === null || title === void 0 ? void 0 : title.split(TRANSLATE_TITLE_DIVING)) === null || _a === void 0 ? void 0 : _a[0];\n        let originComment = body;\n        if (body.indexOf(ORIGINAL_MD5_PREFIX) > -1) {\n            originComment = body.slice(body.indexOf(ORIGIN_CONTENT_PREFIX) + ORIGIN_CONTENT_PREFIX.length, body.indexOf(ORIGIN_CONTENT_POSTFIX));\n        }\n        if (originComment.indexOf(REPLAY_PREFIX1) > -1) {\n            console.log(\"REPLAY_PREFIX1 \");\n            originComment = originComment.slice(originComment.indexOf(REPLAY_PREFIX1) + REPLAY_PREFIX1.length);\n        }\n        if (originComment.indexOf(REPLAY_PREFIX2) > -1) {\n            console.log(\"REPLAY_PREFIX2 \");\n            originComment = originComment.slice(originComment.indexOf(REPLAY_PREFIX2) + REPLAY_PREFIX2.length);\n        }\n        const titleContentUnionText = translate_1.translateText.stringify(originComment, originTitle);\n        //对比md5和原文是否一致\n        const isNotModified = checkMd5(body, originComment);\n        if (isNotModified) {\n            return;\n        }\n        // translate issue comment body to english\n        const translateString = yield (0, utils_1.translate)(titleContentUnionText);\n        if (!translateString || translateString == titleContentUnionText) {\n            return core.warning('The translateBody is null or same, ignore return.');\n        }\n        let [translateTitle, translateComment] = translate_1.translateText.parse(translateString);\n        const isTransSameFlag = isTransSameText(originComment, translateComment);\n        if (isTransSameFlag) {\n            return;\n        }\n        //替换翻译后的markdown文本为html文本，并改变md5\n        console.log('替换前的内容：' + originComment);\n        //替换markdown语法转换为HTML标签\n        const parsedComment = yield marked_1.default.parse(originComment);\n        console.log('替换后的html内容：' + parsedComment);\n        const md5Text = ORIGINAL_MD5_PREFIX + ts_md5_1.Md5.hashStr(parsedComment) + ORIGINAL_MD5_POSTFIX;\n        // 拼接字符串\n        body = `    ${DEFAULT_BOT_MESSAGE}\n---\n${translateComment}\n${ORIGIN_CONTENT_PREFIX}${parsedComment}${ORIGIN_CONTENT_POSTFIX}${md5Text}`;\n        if (translateTitle && originTitle !== translateTitle) {\n            title = [originTitle, translateTitle].join(TRANSLATE_TITLE_DIVING);\n        }\n        yield update(octokit, body || undefined, title || undefined);\n        core.setOutput('complete time', new Date().toTimeString());\n    });\n}\n//工具函数\nfunction checkMd5(body, titleContentOrigin) {\n    const startIndex = body.indexOf(ORIGINAL_MD5_PREFIX);\n    let newMd5 = ts_md5_1.Md5.hashStr(titleContentOrigin);\n    if (startIndex > -1) {\n        // md5\n        const startIndex = body.indexOf(ORIGINAL_MD5_PREFIX);\n        const endIndex = body.indexOf(ORIGINAL_MD5_POSTFIX);\n        const originalMd5 = body.slice(startIndex + ORIGINAL_MD5_PREFIX.length, endIndex);\n        if (originalMd5 === newMd5) {\n            core.info('原文不变，不需要edit');\n            return true;\n        }\n        else {\n            core.info('2个md5不一致，需要重新翻译提交！');\n            return false;\n        }\n    }\n    return false;\n}\nfunction isTransSameText(originComment, translateComment) {\n    //如果originComment的前20个字符和translateComment的前20个字符一样，就不用翻译了\n    if (originComment &&\n        translateComment &&\n        originComment.length == translateComment.length) {\n        core.info('内容一样，不需要翻译');\n        return true;\n    }\n    if (originComment &&\n        translateComment &&\n        originComment.length > 20 &&\n        translateComment.length > 20) {\n        const originCommentStart = originComment.substring(0, 20);\n        const translateCommentStart = translateComment.substring(0, 20);\n        if (originCommentStart === translateCommentStart) {\n            core.info('前20个字符一样，不需要翻译');\n            return true;\n        }\n    }\n    return false;\n}\nfunction run() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield main();\n        }\n        catch (err) {\n            core.setFailed(err.message);\n        }\n    });\n}\nrun();\n"],"names":[],"sourceRoot":""}