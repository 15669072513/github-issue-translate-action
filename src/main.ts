import * as core from '@actions/core'
import * as github from '@actions/github'
import translate from '@tomsun28/google-translate-api'
const franc = require('franc-min')

const TRANSLATE_TITLE_DIVING = ` || `;
const TRANSLATE_DIVIDING_LINE = `<!--This is a translation content dividing line, the content below is generated by machine, please do not modify the content below-->`;
const DEFAULT_BOT_MESSAGE = `Bot detected the issue body's language is not English, translate it automatically. 👯👭🏻🧑‍🤝‍🧑👫🧑🏿‍🤝‍🧑🏻👩🏾‍🤝‍👨🏿👬🏿`;
const DEFAULT_BOT_TOKEN_BASE64 = 'Y2I4M2EyNjE0NThlMzIwMjA3MGJhODRlY2I5NTM0ZjBmYTEwM2ZlNg==';
const DEFAULT_BOT_LOGIN_NAME = 'Issues-translate-bot';
const DEFAULT_BOT_TOKEN = Buffer.from(DEFAULT_BOT_TOKEN_BASE64, 'base64').toString();

async function run(): Promise<void> {
  try {
    const { context: { eventName, payload: { issue, comment, action } } } = github;
    const isIssue = eventName === 'issue';
    const isIssueComment = eventName === 'issue_comment';
    const isIssueCreated = isIssueComment && action === 'created';
    const isIssueOpened = isIssue && action === 'opened';

    if (!isIssueCreated && !isIssueOpened) {
      return core.info(
        `The status of the action must be created on issue_comment, no applicable - ${github.context.payload.action} on ${github.context.eventName}, return`
      );
    }

    const isModifyTitle = core.getInput('IS_MODIFY_TITLE')
    const shouldAppendContent = core.getInput('APPEND_TRANSLATION')
    const issueNumber = issue?.number;
    const originTitle = issue?.title?.split(TRANSLATE_TITLE_DIVING)?.[0];
    const originComment = (isIssueComment ? comment?.body : issue?.body)?.split(TRANSLATE_DIVIDING_LINE)?.[0];
    const issueUser = isIssueComment ? comment?.user?.login : issue?.user?.login;
    const botNote = core.getInput('CUSTOM_BOT_NOTE')?.trim() || DEFAULT_BOT_MESSAGE;

    if (!issueNumber) {
      return;
    }
    
    let needCommitComment = originComment && originComment !== 'null' && detectIsEnglish(originComment);
    let needCommitTitle = isIssueOpened && originTitle && originTitle !== 'null' && detectIsEnglish(originTitle);
    
    let translateOrigin = null
    
    if (originComment && originComment !== 'null' && !needCommitComment) {
      core.info('Detect the issue comment body is english already, ignore.');
    }
    if (isIssueOpened && originTitle && originTitle !== null && !needCommitTitle) {
      core.info('Detect the issue title body is english already, ignore.');
    }

    if (!needCommitTitle && !needCommitComment) {
      return core.info('Detect the issue do not need translated, return.');
    }

    if (needCommitComment && needCommitTitle) {
      translateOrigin = `${originComment}@@====${originTitle}`
    } else if (needCommitComment) {
      translateOrigin = originComment
    } else {
      translateOrigin = `null@@====${originTitle}`
    }

    // ignore when bot comment issue himself
    const botToken = core.getInput('BOT_GITHUB_TOKEN') || DEFAULT_BOT_TOKEN;
    const octokit = github.getOctokit(botToken);

    let botLoginName = core.getInput('BOT_LOGIN_NAME') || DEFAULT_BOT_LOGIN_NAME;
    if (!botLoginName) {
      const botInfo = await octokit.request('GET /user')
      botLoginName = botInfo.data.login;
    }
    
    if (botLoginName === issueUser) {
      return core.info(
        `The issue comment user is bot ${botLoginName} himself, ignore return.`
      );
    }

    core.info(`translate origin body is: ${translateOrigin}`)

    // translate issue comment body to english
    const translateTmp = await translateIssueOrigin(translateOrigin)
    if (!translateTmp || translateTmp === translateOrigin) {
      return core.warning('The translateBody is null or same, ignore return.');
    }

    const translateBody: string[] = translateTmp.split('@@====');
    let translateComment = translateBody[0].trim();
    const translateTitle = translateBody?.[1]?.trim();

    core.info(`translate body is: ${translateTmp}`);

    if (translateComment === originComment) {
      needCommitComment = false;
    }
    if (translateTitle === originTitle) {
      needCommitTitle = false;
    }

    if (shouldAppendContent) {
      if (needCommitTitle && translateTitle) {
        const title = [originTitle, translateTitle].join(TRANSLATE_TITLE_DIVING);
        await modifyTitle(issueNumber, title, octokit);
      }

      if (needCommitComment) {
        const comment = [originComment, translateComment].join(TRANSLATE_DIVIDING_LINE);
        await modifyComment(issueNumber, comment, octokit);
      }
    } else {
      translateComment = `
> ${botNote}
----
${isModifyTitle === 'false' && needCommitComment ? '**Title:** ' + translateTitle : ''}

${translateComment}`;
      if (isModifyTitle === 'true' && translateTitle && needCommitTitle) {
        await modifyTitle(issueNumber, translateTitle, octokit)
      }

      if (needCommitComment && translateComment) {
        await createComment(issueNumber, translateComment, octokit)
      }
    }

    core.setOutput('complete time', new Date().toTimeString())
  } catch (error: any) {
    core.setFailed(error.message)
  }
}

function detectIsEnglish(body: string | null): boolean | true {
  if (body === null) {
    return true
  }
  const detectResult = franc(body)
  if (
    detectResult === 'und' ||
    detectResult === undefined ||
    detectResult === null
  ) {
    core.warning(`Can not detect the undetermined comment body: ${body}`)
    return false
  }
  core.info(`Detect comment body language result is: ${detectResult}`)
  return detectResult === 'eng'
}

async function translateIssueOrigin(body: string): Promise<string> {
  let result = ''
  await translate(body, {to: 'en'})
    .then(res => {
      if (res.text !== body) {
        result = res.text
      }
    })
    .catch(err => {
      core.error(err)
      core.setFailed(err.message)
    })
  return result
}

async function createComment(
  issueNumber: number,
  body: string,
  octokit: ReturnType<typeof github.getOctokit>
): Promise<void> {
  const {owner, repo} = github.context.repo
  const issue_url = github.context.payload.issue?.html_url
  await octokit.issues.createComment({
    owner,
    repo,
    issue_number: issueNumber,
    body
  })
  core.info(
    `complete to push translate issue comment: ${body} in ${issue_url} `
  )
}

async function modifyTitle(
  issueNumber: number,
  title: string,
  octokit: ReturnType<typeof github.getOctokit>
): Promise<void> {
  const {owner, repo} = github.context.repo
  const issue_url = github.context.payload.issue?.html_url
  await octokit.issues.update({
    owner,
    repo,
    issue_number: issueNumber,
    title
  })
  core.info(
    `complete to modify translate issue title: ${title} in ${issue_url} `
  );
}

async function modifyComment(
  issueNumber: number,
  comment: string,
  octokit: ReturnType<typeof github.getOctokit>
) {
  const { owner, repo } = github.context.repo;
  await octokit.issues.update({
    owner,
    repo,
    issue_number: issueNumber,
    body: comment,
  });

  const issue_url = github.context.payload.issue?.html_url;
  return core.info(
    `complete to modify translate issue body: ${comment} in ${issue_url} `
  );
}

run();
